/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ValidateResolver } from "nexus-validate"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ScheduleFilterType: { // input type
    duration?: number | null; // Int
    id?: number | null; // Int
    pause?: number | null; // Int
    train_id?: number | null; // Int
  }
  ScheduleSortType: { // input type
    field: NexusGenEnums['SortScheduleField']; // SortScheduleField!
    sort_direction?: NexusGenEnums['SortDirection'] | null; // SortDirection
  }
  StationsFilterType: { // input type
    id?: number | null; // Int
    name?: string | null; // String
    station_form?: string | null; // String
  }
  StationsSortType: { // input type
    field: NexusGenEnums['SortStationsField']; // SortStationsField!
    sort_direction?: NexusGenEnums['SortDirection'] | null; // SortDirection
  }
}

export interface NexusGenEnums {
  SortDirection: "asc" | "desc"
  SortScheduleField: "duration" | "id" | "pause" | "train_id"
  SortStationsField: "name" | "station_form"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Schedule: { // root type
    duration?: number | null; // Int
    id?: number | null; // Int
    pause?: number | null; // Int
    station_id?: number | null; // Int
    train_id?: number | null; // Int
  }
  Station: { // root type
    id?: number | null; // Int
    name?: string | null; // String
    station_form?: string | null; // String
  }
  Train: { // root type
    id?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createSchedule: NexusGenRootTypes['Schedule'] | null; // Schedule
    createStation: NexusGenRootTypes['Station'] | null; // Station
    deleteSchedule: NexusGenRootTypes['Schedule'] | null; // Schedule
    deleteStation: NexusGenRootTypes['Station'] | null; // Station
    updateSchedule: NexusGenRootTypes['Schedule'] | null; // Schedule
    updateStation: NexusGenRootTypes['Station'] | null; // Station
  }
  Query: { // field return type
    schedule: Array<NexusGenRootTypes['Schedule'] | null>; // [Schedule]!
    stations: Array<NexusGenRootTypes['Station'] | null>; // [Station]!
    trains: Array<NexusGenRootTypes['Train'] | null>; // [Train]!
  }
  Schedule: { // field return type
    duration: number | null; // Int
    id: number | null; // Int
    pause: number | null; // Int
    station_id: number | null; // Int
    train_id: number | null; // Int
  }
  Station: { // field return type
    id: number | null; // Int
    name: string | null; // String
    station_form: string | null; // String
  }
  Train: { // field return type
    id: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createSchedule: 'Schedule'
    createStation: 'Station'
    deleteSchedule: 'Schedule'
    deleteStation: 'Station'
    updateSchedule: 'Schedule'
    updateStation: 'Station'
  }
  Query: { // field return type name
    schedule: 'Schedule'
    stations: 'Station'
    trains: 'Train'
  }
  Schedule: { // field return type name
    duration: 'Int'
    id: 'Int'
    pause: 'Int'
    station_id: 'Int'
    train_id: 'Int'
  }
  Station: { // field return type name
    id: 'Int'
    name: 'String'
    station_form: 'String'
  }
  Train: { // field return type name
    id: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createSchedule: { // args
      duration: number; // Int!
      pause: number; // Int!
      station_id: number; // Int!
      train_id: number; // Int!
    }
    createStation: { // args
      name: string; // String!
      station_form: string; // String!
    }
    deleteSchedule: { // args
      id: number; // Int!
    }
    deleteStation: { // args
      id: number; // Int!
    }
    updateSchedule: { // args
      duration: number; // Int!
      id: number; // Int!
      pause: number; // Int!
      station_id: number; // Int!
      train_id: number; // Int!
    }
    updateStation: { // args
      id: number; // Int!
      name: string; // String!
      station_form: string; // String!
    }
  }
  Query: {
    schedule: { // args
      filters?: NexusGenInputs['ScheduleFilterType'] | null; // ScheduleFilterType
      sort?: NexusGenInputs['ScheduleSortType'] | null; // ScheduleSortType
    }
    stations: { // args
      filters?: NexusGenInputs['StationsFilterType'] | null; // StationsFilterType
      sort?: NexusGenInputs['StationsSortType'] | null; // StationsSortType
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Validate mutation arguments.
     */
    validate?: ValidateResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}